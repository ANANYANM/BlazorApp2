@page "/agent-list"
@inject UserService UserService
@using BlazorApp2
@using BlazorApp2.Models
@using BlazorApp2.Services
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject TicketContext _context
@inject IJSRuntime JSRuntime

<h3>Agent List</h3>
@if (!GlobalVariables.isAdmin)
{
    <p>You do not have permission to view this page.</p>
}
else
{
@if (agents == null)
{
    <p>Loading agents...</p>
}
else if (agents.Count == 0)
{
    <p>No agents found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>UserId</th>
                <th>Name</th>
                <th>Username</th>
                <th>IsActive</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var agent in agents)
            {
                <tr class="@((agent.IsActive ? "" : "table-danger"))"><!-- Conditionally change row style -->
                    <td>@agent.UserId</td>
                    <td>@agent.Name</td>
                    <td>@agent.Username</td>
                    <td>@(agent.IsActive ? "Active" : "Inactive")</td> <!-- Display active/inactive status -->
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditAgent(agent.UserId)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => ToggleAgentStatus(agent.UserId)">@(agent.IsActive ? "Deactivate" : "Activate")</button><!-- Change button label -->
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
}
    <button class="btn btn-primary" @onclick="@(() => NavigationManager.NavigateTo("/admin_dashboard"))">Admin Dashboard</button>
@code {
    private List<User>? agents;


    // No need for a constructor, use lifecycle methods instead
    protected override async Task OnInitializedAsync()
    {
        await GetAgentsAsync();
    }

    private async Task GetAgentsAsync()
    {
        // Fetch agents asynchronously from the UserService
        agents = await UserService.GetAgentsAsync();
    }

    private void EditAgent(int userId)
    {
        // Navigate to the edit page for the selected agent (you can create a separate page for this)
        NavigationManager.NavigateTo($"/edit-agent/{userId}");
    }

    private async Task ToggleAgentStatus(int userId)
    {
        // Confirm deletion and then remove the agent
        bool confirmed = await JSRuntime.InvokeAsync<bool>("window.confirm", new[] { "Are you sure you want to change the status of this agent?" });
        if (confirmed)
        {
            await UserService.ToggleAgentStatusAsync(userId);
            await GetAgentsAsync(); // Refresh the list after deletion
        }
    }
}

