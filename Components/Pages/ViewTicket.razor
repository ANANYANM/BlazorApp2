@page "/view-tickets"
@using Microsoft.AspNetCore.Http
@using BlazorApp2.Models
@using BlazorApp2.Services
@inject TicketService TicketService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject TicketContext _context

<h3>View Tickets</h3>

@if (tickets == null)
{
    <p>Loading...</p>
}
else if (tickets.Count == 0)
{
    <p>No tickets available.</p>
}
else
{
    <h4>Customer List</h4>
    <ul>
        @foreach (var customer in tickets)
        {
            <li>@customer.CustomerName - @customer.Issue</li>
        }
    </ul>
    <table class="table">
        <thead>
            <tr>
                <th>TicketId</th>
                <th>Title</th>
                <th>CustomerName</th>
                <th>Issue</th>
                <th>CompanyName</th>
                <th>IssueCategory</th>
                <th>Description</th>
                <th>Status</th>
                <th>AssignTo</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ticket in tickets)
            {
                <tr>
                    <td>@ticket.TicketId</td>
                    <td>@ticket.Title</td>
                    <td>@ticket.CustomerName</td>
                    <td>@ticket.Issue</td>
                    <td>@ticket.CompanyName</td>
                    <td>@ticket.IssueCategory</td>
                    <td>@ticket.Description</td>
                    <td>@ticket.Status</td>
                    <td>
                        <select @bind="ticket.AssignTo">
                            <option value="">Select Agent</option>
                            @foreach (var agent in agents)
                            {
                                <option value="@agent">@agent</option>
                            }
                        </select>
                    </td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => AssignAgent(ticket)">Assign</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-danger">@errorMessage</p>
}

@code {
    private List<Ticket> tickets = new List<Ticket>();
    private List<string> agents = new List<string> { "agent1", "agent2", "agent3" };
    private string errorMessage;
    private string username;
    private string password;


    protected override async Task OnInitializedAsync()
    {

        // checks if admin, if not, does not allow to enter the page
        if (GlobalVariables.isAdmin)
        {
            LoadTickets();
        }
        else
        {
            NavigationManager.NavigateTo("/admin-login");
        }
    }

    private void LoadTickets()
    {
        try
        {
            // Your logic to load tickets from the service
            tickets = TicketService.GetTickets() ?? new List<Ticket>();
            tickets = _context.Tickets.ToList();
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load tickets: " + ex.Message;
        }

    }
    private void AssignAgent(Ticket ticket)
    {
        try
        {
            //TicketService.UpdateTicket(ticket);
            _context.Tickets.Update(ticket);
            _context.SaveChanges();
            errorMessage = "Ticket assigned successfully.";
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to assign agent: " + ex.Message;
        }
    }
}