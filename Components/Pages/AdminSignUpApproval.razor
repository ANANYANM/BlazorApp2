@page "/adminsignup-approval"
@using BlazorApp2.Models
@using BlazorApp2.Services
@inject CustomerService CustomerService
@inject NavigationManager NavigationManager
@using BlazorApp2
@using BlazorApp2.Components
@rendermode InteractiveServer
<h3>Pending Sign-Ups</h3>

@if (pendingSignUps != null)
{
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Company</th>
                <th>Username</th>
                <th>Role</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var signUp in pendingSignUps)
            {
                <tr>
                    <td>@signUp.Name</td>
                    <td>@signUp.Company</td>
                    <td>@signUp.Username</td>
                    <td> @signUp.Role</td>
                    <td>
                        <button @onclick="() => ApproveSignUp(signUp.Id, signUp.Role)">Approve</button>
                        <button @onclick=" () => RejectSignUp(signUp.Id)">Reject</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<PendingSignUp>? pendingSignUps;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        pendingSignUps = await CustomerService.GetPendingSignUps();
    }

    private async Task ApproveSignUp(int id,string role)
    {
        try
        {
            await CustomerService.ApproveSignUp(id,role);
            pendingSignUps = await CustomerService.GetPendingSignUps();
            // await OnInitializedAsync(); // Refresh pending sign-ups list
           //NavigationManager.NavigateTo("/customer-login", forceLoad: true);
            @*if (role == "customer") // Corrected syntax
            {
                NavigationManager.NavigateTo("/customer-login", forceLoad: true);
            }
            else if (role == "agent") // Added an else-if for agent
            {
                NavigationManager.NavigateTo("/agent-login", forceLoad: true);
            }
            else
            {
                // Handle admin or any other roles if necessary
                NavigationManager.NavigateTo("/admin-login", forceLoad: true);
            }*@
        }
        catch (Exception ex)
        {
            errorMessage = $"Error approving sign-up: {ex.Message}. Inner exception: {ex.InnerException?.Message}";
        }
    }

    private async Task RejectSignUp(int id)
    {
        try
        {
            await CustomerService.RejectSignUp(id);
            pendingSignUps = await CustomerService.GetPendingSignUps();
            //await OnInitializedAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error rejecting sign-up: {ex.Message}";
        }

    }

    public class PendingSignUpModel
    {
        public int? Id { get; set; }
        public string? Name { get; set; }
        public string? Company { get; set; }
        public string? Username { get; set; }
        public string? Role { get; set; }
        public bool IsApproved { get; set; }
    }
}

