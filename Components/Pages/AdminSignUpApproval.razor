@page "/adminsignup-approval"
@using BlazorApp2.Models
@using BlazorApp2.Services
@inject CustomerService CustomerService
@inject NavigationManager NavigationManager
@using BlazorApp2
@using BlazorApp2.Components
@rendermode InteractiveServer
<h3>Pending Sign-Ups</h3>

@if (!GlobalVariables.isAdmin)
{
    <p>You do not have permission to view this page.</p>
}
else
{
@if (pendingSignUps != null)
{
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Company</th>
                <th>Username</th>
                <th>Role</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var signUp in pendingSignUps)
            {
                <tr>
                    <td>@signUp.Name</td>
                    <td>@signUp.Company</td>
                    <td>@signUp.Username</td>
                    <td> @signUp.Role</td>
                    <td>
                            @if (signUp.Role != null)
                            {
                                <button @onclick="() => ApproveSignUp(signUp.Id, signUp.Role)">Approve</button>
                            }
                            else
                            {
                                <p>Role is missing</p>
                            }
                        <button class="btn btn-danger" @onclick=" () => RejectSignUp(signUp.Id)">Reject</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
}
<button class="btn btn-primary" @onclick="@(() => NavigationManager.NavigateTo("/admin_dashboard"))">AdminDashboard</button>
@code {
    private List<PendingSignUp>? pendingSignUps;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        pendingSignUps = await CustomerService.GetPendingSignUps();
    }

    private async Task ApproveSignUp(int id,string role)
    {
        try
        {
            await CustomerService.ApproveSignUp(id,role);
            pendingSignUps = await CustomerService.GetPendingSignUps();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error approving sign-up: {ex.Message}. Inner exception: {ex.InnerException?.Message}";
        }
    }

    private async Task RejectSignUp(int id)
    {
        try
        {
            await CustomerService.RejectSignUp(id);
            pendingSignUps = await CustomerService.GetPendingSignUps();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error rejecting sign-up: {ex.Message}";
        }

    }

    public class PendingSignUpModel
    {
        public int? Id { get; set; }
        public string? Name { get; set; }
        public string? Company { get; set; }
        public string? Username { get; set; }
        public string? Role { get; set; }
        public bool IsApproved { get; set; }
    }
}

