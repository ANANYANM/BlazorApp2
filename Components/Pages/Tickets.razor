@page "/tickets"
@using BlazorApp2
@using BlazorApp2.Models
@using BlazorApp2.Services
@inject TicketService TicketService
@inject NavigationManager NavigationManager 
@rendermode InteractiveServer
@inject TicketContext _context

<h3>Create Ticket</h3>

<div>
    <label>TicketId:</label>
    <input type="Number" @bind="newTicket.TicketId" />
</div>
<div>
    <label>Title:</label>
    <input type="Text" @bind="newTicket.Title" />
</div>
<div>
    <label>CustomerName:</label>
    <input type="Text" @bind="newTicket.CustomerName" />
</div>
<div>
    <label>Issue:</label>
    <input type="Text" @bind="newTicket.Issue" />
</div>
<div>
    <label>CompanyName:</label>
    <input type="Text" @bind="newTicket.CompanyName" />
</div>
<div>
    <label>IssueCategory:</label>
    <input type="Text" @bind="newTicket.IssueCategory" />
</div>
<div>
    <label>Description:</label>
    <input type="text" @bind="newTicket.Description"/>
</div>

<button class="btn btn-primary" @onclick="CreateTicket">Submit</button>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger font-weight-bold">@errorMessage</div>
}

<div>Your Tickets</div>
@foreach (var ticket in tickets)
{
    <div>@ticket.TicketId</div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-danger">@errorMessage</p>
}
@code {
    private Ticket newTicket = new Ticket();
    private List<Ticket> tickets = new List<Ticket>();
    private string errorMessage;
    private string username;
    private string password;

    protected override async Task OnInitializedAsync()
    {

        if (GlobalVariables.isCustomer == true)
        {
            //tickets = TicketService.GetTickets();
            tickets = _context.Tickets.ToList();

        }
        else
        {
            NavigationManager.NavigateTo("/customer-login");
        }
    }
    private async void CreateTicket()
    {
        try{
            //TicketService.AddTicket(newTicket);
            //tickets = TicketService.GetTickets(); // Refresh the ticket list
             _context.Tickets.Add(newTicket);
            await  _context.SaveChangesAsync();
             tickets =  _context.Tickets.ToList();//Refresh the ticket list
            newTicket = new Ticket(); // Reset the form
            StateHasChanged();
        }
        catch(Exception ex)
        {
            errorMessage = "An error occurred while creating the ticket: " + ex.Message;
        }
    }
}

